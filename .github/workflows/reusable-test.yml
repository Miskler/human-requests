name: "Reusable Test Workflow"

on:
  workflow_call:
    inputs:
      upload-coverage:
        type: boolean
        default: true
      python-versions:
        type: string
        default: '["3.12"]'
      headless:
        type: boolean
        default: false
  workflow_dispatch:
    inputs:
      upload-coverage:
        description: "Отправлять coverage на Codecov?"
        type: boolean
        default: true
      python-versions:
        description: "JSON-список версий Python"
        type: string
        default: '["3.12"]'
      headless:
        description: "Запускать браузер headless (true/false)"
        type: boolean
        default: false
  pull_request:
    branches:
      - "**"

# нужно для auto-PR
permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(inputs.python-versions || github.event.inputs.python-versions || '["3.12"]') }}
        include:
          - python-version: "3.12"
            primary: true
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt

      - name: Install dev deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          playwright install --with-deps

      - name: Start test server in background
        run: make serve-bg
        working-directory: test_server

      - name: Run tests
        run: |
          # “виртуальный” дисплей с нормальной глубиной цвета
          if [ "${{ github.event.inputs.headless }}" = "true" ] || [ "${{ inputs.headless }}" = "true" ]; then
            make ci-test
          else
            xvfb-run -s "-screen 0 1920x1080x24" make ci-test
          fi

      # если тесты упали — повторяем прогон с авто-обновлением ожиданий
      - name: Re-run tests in auto-update mode (PYTEST_ADDOPTS=--update-anti)
        if: failure()
        env:
          PYTEST_ADDOPTS: --update-anti
        run: |
          if [ "${{ github.event.inputs.headless }}" = "true" ] || [ "${{ inputs.headless }}" = "true" ]; then
            make ci-test || true
          else
            xvfb-run -s "-screen 0 1920x1080x24" make ci-test || true
          fi

      - name: Upload updated antibot JSON
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: antibot-json-${{ matrix.python-version }}
          path: tests/sannysoft/browser_antibot_sannysoft.json
          if-no-files-found: ignore

      - name: Create PR with updated antibot JSON (if changed)
        if: failure()
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ci/update-anti-${{ github.run_id }}
          add-paths: |
            tests/sannysoft/browser_antibot_sannysoft.json
          commit-message: "tests: update antibot expectations (auto)"
          title: "tests: update antibot expectations (auto)"
          body: |
            CI перегенерировал `tests/sannysoft/browser_antibot_sannysoft.json` после падений тестов.
            Этот PR автоматически создан для синхронизации стабильных/нестабильных ожиданий.

      - name: Upload raw reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.python-version }}
          path: |
            htmlcov/
            junit.xml
            coverage.xml

  reports:
    needs: tests
    if: contains(fromJson(inputs.python-versions || github.event.inputs.python-versions || '["3.12"]'), '3.12') && (inputs.upload-coverage || github.event.inputs.upload-coverage)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: junit-3.12
          merge-multiple: true

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install reporting tools
        run: python -m pip install --no-cache-dir "genbadge[all]" junit2html

      - name: Generate badges & HTML report
        run: |
          genbadge tests    -i junit.xml    -o tests-badge.svg
          genbadge coverage -i coverage.xml -o coverage.svg
          junit2html junit.xml tests-report.html

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload final artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            htmlcov/
            coverage.xml
            coverage.svg
            tests-badge.svg
            tests-report.html

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt
      - run: make install-dev          # flake8 уже придёт
      - run: make lint

  type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            **/pyproject.toml
            **/requirements*.txt
      - run: make install-dev          # mypy уже придёт
      - run: make type-check
